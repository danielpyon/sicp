Ben Bitdiddle has invented a test to determine whether the interpreter he is faced with is using applicative-order evaluation or normal-order evaluation. He defines the following two procedures:

(define (p) (p))

(define (test x y)
  (if (= x 0)
      0
      y))

Then he evaluates the expression

(test 0 (p))

What behavior will Ben observe with an interpreter that uses applicative-order evaluation? What behavior will he observe with an interpreter that uses normal-order evaluation? Explain your answer. (Assume that the evaluation rule for the special form if is the same whether the interpreter is using normal or applicative order: The predicate expression is evaluated first, and the result determines whether to evaluate the consequent or the alternative expression.)

---

With applicative order evaluation, the arguments are evaluated first, then the function. Therefore, the program never halts since (p) never evaluates.

With normal order evaluation, the function is evaluated first, then the arguments are substituted into the expression. So it would expand out to:

(if (= 0 0) 0 (p)), which evaluates to 0, since the predicate is true (rememeber, we assume that the if special form doesn't evaluate the alternative expression if the predicate is true).
